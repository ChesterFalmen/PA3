// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec3 tangent;
attribute vec2 texture;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelNormalMatrix;
uniform vec3 lightPosition;
varying vec3 normalInter;
varying vec3 vertexPosition;
float Ka = 0.5;
float Kd = 0.5;
float Ks = 0.5;
float shininessVal = 200.0;
vec3 ambientColor = vec3(0.05, 0.7, 0.05); 
vec3 diffuseColor = vec3(0.7, 0.7, 0.7);   
vec3 specularColor = vec3(0.0, 0.0, 0.0);

varying vec3 vVertex;
varying vec3 vNormal;
varying vec3 vTangent;
varying vec3 vBitangent;
varying vec2 vTexture;

varying float vDiffCoef;
varying float vSpecCoef;

uniform sampler2D normalT;



void main() {
    vTexture = texture;
    vec3 T = normalize(vec3(ModelNormalMatrix * vec4(tangent, 0.0)));
    normalInter = vec3(ModelNormalMatrix * vec4(normal, 0.0));
    vec3 ni = normalize(normalInter);
    // prioritize normal
    T = normalize(T - dot(T, ni) * ni);
    vTangent = T;
    vBitangent = normalize(cross(T,ni));
    vec3 N = texture2D(normalT,vTexture).xyz;
    N = N * 2.0 - 1.0;
    //mat3 TBN = mat3(T, B, N);
    //vec3 worldNormal = normalize(TBN * N);
    vNormal = ni;
    vec4 vertex4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vertexPosition = vec3(vertex4) / vertex4.w;
    

    
    vec3 L = normalize(lightPosition - vertexPosition);
    vVertex = vertexPosition;

    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.5;

    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);
        vec3 V = normalize(-vertexPosition);

        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }


    vDiffCoef = Kd * lambertian;
    vSpecCoef = Ks * specular;

    gl_Position = vertex4;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform sampler2D diffuseT;
uniform sampler2D normalT;
uniform sampler2D specularT;

varying float vDiffCoef;
varying float vSpecCoef;

varying vec3 vVertex;
varying vec3 vNormal;
varying vec3 vTangent;
varying vec3 vBitangent;
varying vec2 vTexture;
uniform vec3 lightPosition;

void main() {
    float shininessVal = 200.0;
    vec3 T = vTangent;
    vec3 B = normalize(vBitangent);
    vec3 N = texture2D(normalT,vTexture).rgb;
    N = N * 2.0 - 1.0;
    mat3 TBN = mat3(T, B, N);
    vec3 worldNormal = normalize(TBN * N);
    vec3 L = normalize(lightPosition - vVertex);
    float lambertian = max(dot(worldNormal, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, worldNormal);      // Reflected light vector
        vec3 V = normalize(-vVertex); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }
    vec4 diffuseColor = vec4(lambertian*texture2D(diffuseT,vTexture).rgb,1.0);
    vec4 specularColor = vec4(specular*texture2D(specularT,vTexture).rgb,1.0);
    gl_FragColor = diffuseColor+specularColor;
    //gl_FragColor = vec4(texture2D(specularT,vTexture).rgb,1.0);
    //gl_FragColor = vec4(texture2D(normalT,vTexture).rgb,1.0);
}`;